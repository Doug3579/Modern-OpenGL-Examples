/* This program is deliberately monolithic in structure (having only one subprogram other
 * than main) with the intent of making the flow of OpenGL commands easier to follow. 
 *  
 * This demo shows the use of a VBO (vertex data) in a single VAO and an index buffer.It displays 
 * a static yellow rectangle (actually two adjacent right triangles) on a blue background. The
 * embedded shader source code is kind of cool for experimenting.
 */
package org.DFB.vao_demo_indices;

import java.nio.FloatBuffer;
import java.nio.IntBuffer;

import org.lwjgl.BufferUtils;
import org.lwjgl.LWJGLException;
import org.lwjgl.opengl.ContextAttribs;
import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.DisplayMode;
import org.lwjgl.opengl.PixelFormat;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL15;
import org.lwjgl.opengl.GL20;
import org.lwjgl.opengl.GL30;

public class VAODemo2_0 {
	private static final int screenWidth = 800;
	private static final int screenHeight = 600;

	private static String vertexShader = 
			"#version 150 core \n"+
			"in vec3 in_Position;"+
			"void main(void) {"+
			"   gl_Position = vec4(in_Position.x, in_Position.y, 0f, 1.0f);"+
			"}\n";
	
	private static String fragmentShader = 
			"#version 150 core \n"+
			"out vec4 out_Color;"+ // not actually required since there's only one output variable
			"void main(void) {"+
			"   out_Color = vec4(1f, 1f, 0f, 1f);"+ //yellow
			"}\n";

	public static void main(String[] args) {

		final int VERTEX_ATTRIB_ID = 0;
		final int FLOATS_PER_VERT = 2;
		final long FIRST_INDEX = 0L;
		final int TIGHTLY_PACKED = 0;

		// create the LWJGL display; this creates the OpenGL context (important!)
		ContextAttribs attribs = new ContextAttribs(3,2)
			.withForwardCompatible(true)
			.withProfileCore(true);
		try {
			Display.setDisplayMode(new DisplayMode(screenWidth, screenHeight));
			Display.create(new PixelFormat(), attribs);
		}
		catch (LWJGLException e) { e.printStackTrace(); }

		GL11.glViewport(0, 0, screenWidth, screenHeight);

		// compile and link the shaders
		int vertexShaderID = loadShader(vertexShader, GL20.GL_VERTEX_SHADER);
		int fragmentShaderID = loadShader(fragmentShader, GL20.GL_FRAGMENT_SHADER);
		int programID = GL20.glCreateProgram();
		GL20.glAttachShader(programID, vertexShaderID);
		GL20.glAttachShader(programID, fragmentShaderID);
		GL20.glBindAttribLocation(programID, VERTEX_ATTRIB_ID, "in_Position");
		GL20.glLinkProgram(programID);
		GL20.glValidateProgram(programID);
		//delete and detach (or vice versa) shaders after linking in order to free memory
		GL20.glDeleteShader(vertexShaderID);
		GL20.glDeleteShader(fragmentShaderID);
		GL20.glDetachShader(programID, vertexShaderID);
		GL20.glDetachShader(programID, fragmentShaderID);

		float[] vertices = new float [] {
				-.5f, 0.5f,  //V0 - upper left
				-.5f, -.5f,  //V1 - lower left
				0.5f, -.5f,  //V2 - lower right
				0.5f, 0.5f,  //V3 - upper right
				};
		
		int[] indices = new int[] {
				0,1,2,  0,2,3,
		};

		//allocate and bind a VAO
		int vaoID = GL30.glGenVertexArrays();
		GL30.glBindVertexArray(vaoID);

		//create the vertex data VBO
		int vboID = GL15.glGenBuffers();
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, vboID);
		FloatBuffer vbuffer = BufferUtils.createFloatBuffer(vertices.length);
		vbuffer.put(vertices).flip();
		// Be sure you bind the Vertex Array (glBindVertexArray) before calling
		// glBufferData! Check for this if java crashes.
		GL15.glBufferData(GL15.GL_ARRAY_BUFFER, vbuffer, GL15.GL_STATIC_DRAW);

		//create the element (index) data VBO
		int iboID = GL15.glGenBuffers();
		GL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, iboID);
		IntBuffer ibuffer = BufferUtils.createIntBuffer(indices.length);
		ibuffer.put(indices).flip();
		GL15.glBufferData(GL15.GL_ELEMENT_ARRAY_BUFFER, ibuffer, GL15.GL_STATIC_DRAW);

		GL20.glEnableVertexAttribArray(VERTEX_ATTRIB_ID);
		GL20.glVertexAttribPointer(VERTEX_ATTRIB_ID, FLOATS_PER_VERT, GL11.GL_FLOAT, false, TIGHTLY_PACKED, FIRST_INDEX);

		GL30.glBindVertexArray(0); //unbind the VAO

		GL11.glClearColor(0f, .3f, .5f, 1f);

		while(!Display.isCloseRequested()) {
			GL11.glClear(GL11.GL_COLOR_BUFFER_BIT|GL11.GL_DEPTH_BUFFER_BIT);

			GL20.glUseProgram(programID);
			GL30.glBindVertexArray(vaoID);
			GL11.glDrawElements(GL11.GL_TRIANGLES, indices.length, GL11.GL_UNSIGNED_INT, FIRST_INDEX);
			GL30.glBindVertexArray(0); //unbind (or detach) the VAO
			GL20.glUseProgram(0);

			Display.update();
			Display.sync(120);
		}

		// All this unbinding, deleting, disabling, and destroying isn't strictly necessary
		// unless you need to free memory. It seems particularly unnecessary during shutdown/cleanup
		// but I've included it so you can see how it's done.
		GL15.glBindBuffer(GL15.GL_ARRAY_BUFFER, 0);
		GL15.glDeleteBuffers(vboID);
		GL15.glBindBuffer(GL15.GL_ELEMENT_ARRAY_BUFFER, 0);
		GL15.glDeleteBuffers(iboID);
		GL20.glDisableVertexAttribArray(VERTEX_ATTRIB_ID);
	    GL30.glDeleteVertexArrays(vaoID);
		GL20.glDeleteProgram(programID);
		Display.destroy();
	}

	private static int loadShader(String shaderSource, int type) {
		int shaderID = GL20.glCreateShader(type);
		GL20.glShaderSource(shaderID, shaderSource);
		GL20.glCompileShader(shaderID);
		if (GL20.glGetShader(shaderID, GL20.GL_COMPILE_STATUS)==GL11.GL_FALSE) {
			System.out.println(GL20.glGetShaderInfoLog(shaderID, 500));
			System.err.println("Could not compile shader");
			System.exit(-1);
		}
		return shaderID;
	}
}
